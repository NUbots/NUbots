// MIT License
//
// Copyright (c) 2023 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
syntax = "proto3";

package message.nuclear;

import "google/protobuf/timestamp.proto";
import "message/nuclear/GroupDescriptor.proto";
import "message/nuclear/IDPair.proto";
import "message/nuclear/ReactionIdentifiers.proto";
import "message/nuclear/ThreadPoolDescriptor.proto";

/**
 * Replicates the NUClear::message::ReactionStatistics class from NUClear
 */
message ReactionStatistics {

    message Event {
        message ThreadInfo {
            /// The ID of the thread
            string thread_id = 1;
            /// The descriptor of the thread pool
            ThreadPoolDescriptor pool = 2;
        }

        /// The thread this event was executed on
        ThreadInfo thread = 1;
        /// The NUClear clock at the time of the event
        google.protobuf.Timestamp nuclear_time = 2;
        /// The real time clock at the time of the event
        google.protobuf.Timestamp real_time = 3;
        /// The thread clock at the time of the event
        google.protobuf.Timestamp thread_time = 4;
    }

    /// The identifiers of the reaction
    ReactionIdentifiers identifiers = 1;

    /// The IDs of the reaction and task that caused this reaction to be run
    /// Will be 0 if it was caused by a non reaction source
    IDPair cause = 2;
    /// The IDs of the reaction and task of this reaction
    IDPair target = 3;

    /// The thread pool that this reaction was intended to be run on
    ThreadPoolDescriptor target_pool = 4;
    /// The groups that this reaction was intended to be run in
    repeated GroupDescriptor target_groups = 5;

    /// The time and thread that this reaction was created on
    Event created = 6;
    /// The time and thread that this reaction was commenced on
    Event started = 7;
    /// The time and thread that this reaction was finished on
    Event finished = 8;

    /// The exception that was thrown by this reaction (if any)
    string exception = 9;
}
