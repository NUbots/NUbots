// MIT License
//
// Copyright (c) 2013 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


syntax = "proto3";

package message.vision;

import "google/protobuf/timestamp.proto";
import "Vector.proto";
import "Matrix.proto";
import "Transform.proto";

message Goal {
    enum Side {
        UNKNOWN_SIDE = 0;
        LEFT         = 1;
        RIGHT        = 2;
    }
    /// Which team the goals belong to
    enum Team {
        UNKNOWN_TEAM = 0;
        OWN          = 1;
        OPPONENT     = 2;
    }
    enum MeasurementType {
        UNKNOWN = 0;
        /// The distance is from the camera to bottom centre of post
        CENTRE = 1;
    }
    message Measurement {
        MeasurementType type = 1;
        /// Normal vectors point inwards towards the centre of the object
        vec3 rGCc       = 2;  // Bottom of goal from camera in camera {c} space
        mat3 covariance = 3;
    }
    message Post {
        /// Vector pointing to top point of post in camera space
        vec3 top = 1;
        /// Vector pointing to bottom point of post in camera space
        vec3 bottom = 2;
        /// Distance from camera to goals, in metres
        double distance = 3;
    }
    Side                 side           = 1;
    Post                 post           = 3;
    repeated Measurement measurements   = 4;
    vec2                 screen_angular = 5;
    vec2                 angular_size   = 6;
}

message Goals {
    uint32                    id        = 1;
    google.protobuf.Timestamp timestamp = 2;
    /// Isometry3d transform from world {w} space to camera {c} space at the time that the image was taken
    iso3 Hcw = 3;

    repeated Goal goals = 4;
}
