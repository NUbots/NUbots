// MIT License
//
// Copyright (c) 2019 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


syntax = "proto3";

package message.output;

import "google/protobuf/timestamp.proto";
import "Vector.proto";
import "Transform.proto";

message CompressedImage {
    message Lens {
        enum Projection {
            UNKNOWN     = 0;
            RECTILINEAR = 1;
            EQUIDISTANT = 2;
            EQUISOLID   = 3;
        }
        Projection projection = 1;
        /// Normalised focal length, in pixels / image width
        float focal_length = 2;
        /// Angular diameter that the lens covers (the area that light hits on the sensor), in radians
        float fov = 3;
        /// Normalised image centre offset - the number of pixels from centre to optical axis / image width
        fvec2 centre = 4;
        fvec2 k      = 5;
    }
    /// Encoding of colour channels, e.g. BGGR, PRG8, RGBA, etc.
    /// see module::output::compressor::turbojpeg::Compressor::compress for full list we use
    uint32 format = 1;
    /// Number of pixels of {x, y} of the image
    uvec2  dimensions = 2;
    bytes  data       = 3;
    uint32 id         = 4;
    /// Name of the camera that took the image
    string name = 5;
    /// Time when the image was taken
    google.protobuf.Timestamp timestamp = 6;
    /// World to camera Isometry3d transform
    iso3 Hcw = 7;
    /// Lens information of the camera that took the image
    Lens lens = 8;
}
