// MIT License
//
// Copyright (c) 2023 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.planning;

import "Vector.proto";
import "Transform.proto";

/// Plan a path to walk to the specified point
message WalkTo {
    /// Transform from desired robot pose {d} to robot {r} space
    iso3 Hrd = 1;
}

/// Turn on the spot in the given direction
message TurnOnSpot {
    /// Direction to turn
    bool clockwise = 1;
}

/// Turn around the ball in the given direction
message PivotAroundPoint {
    /// Direction to turn
    bool clockwise = 1;
}

/// Debug information for walk to planning
message WalkToDebug {
    /// Transform from desired robot pose {d} to robot {r} space
    iso3 Hrd = 1;
    /// Requested walk velocity (vx, vy, w)
    vec3 velocity_target = 2;
    /// Error between robot and target point
    double translational_error = 3;
    /// Angle between the robot unit x and the target point
    double angle_to_target = 4;
    /// Angle between the robot unit x and the desired final heading
    double angle_to_final_heading = 5;
    /// Distance to start aligning with the desired heading
    double max_align_radius = 6;
    /// Distance to remain aligning with the desired heading
    double min_align_radius = 7;
    /// Maximum angle error to only turn in place
    double max_angle_error = 9;
    /// Minimum angle error to start walking at full speed
    double min_angle_error = 8;
}
