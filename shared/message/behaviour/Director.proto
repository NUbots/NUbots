// MIT License
//
// Copyright (c) 2025 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
syntax = "proto3";

package message.behaviour;

message DirectorState {

    message EnumValue {
        /// The string name of the enum value
        string name = 1;
        /// The value of the enum value
        int32 value = 2;
    }

    message DirectorTask {
        /// The name given to this task
        string name = 1;
        /// The id of the group that this task wants to run on
        uint64 target_group = 2;
        /// The priority of this task
        int32 priority = 3;
        /// If this task is optional
        bool optional = 4;
    };

    message Provider {
        enum Classification {
            UNKNOWN = 0;
            PROVIDE = 1;
            START   = 2;
            STOP    = 3;
            ROOT    = 4;
        }

        message WhenCondition {
            /// The string name of the type the when condition is watching
            string type = 1;
            /// The operator that is being used to compare the current state to the expected state
            string comparator = 2;
            /// The expected state of the when condition as a string
            EnumValue expected_state = 3;
            /// The current state of the when condition
            bool current = 4;
        }

        /// The unique id of this provider
        uint64 id = 1;
        /// The id of the group that this provider is part of
        uint64 group = 2;
        /// The classification of this provider
        Classification classification = 3;
        /// When conditions that must be met for this provider to run
        repeated WhenCondition when = 4;
        /// The states that this provider causes
        map<string, EnumValue> causing = 5;
        /// The ids of the groups that this provider needs in order to run
        repeated uint64 needs = 6;
    }

    message Group {
        /// The type that this group handles
        string type = 1;
        /// The ids of the providers that are part of this group
        repeated uint64 provider_ids = 2;
        /// The id of the provider that is currently active or 0 if no provider is active
        uint64 active_provider = 3;
        /// The id of the provider that is currently controlling this group
        uint64 parent_provider = 4;
        /// The ids of the tasks that this group wants to run/is running
        repeated DirectorTask subtasks = 5;
    }

    /// Groups of providers
    map<uint64, Group> groups = 1;
    /// Providers in the system
    map<uint64, Provider> providers = 2;
}
