// MIT License
//
// Copyright (c) 2021 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


syntax = "proto3";

package message.platform.webots;

import "Matrix.proto";
import "Vector.proto";

import "message/support/optimisation/OptimisationRobotPosition.proto";
import "message/support/optimisation/OptimisationCommand.proto";

// Copy of cyberbotics/webots projects/samples/contests/robocup/controllers/player/messages.proto


message Vector3 {
    double X = 1;
    double Y = 2;
    double Z = 3;
}

message PositionSensorMeasurement {
    string name  = 1;
    double value = 2;
}

message AccelerometerMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [m/sË†2], x-axis, y-axis, z-axis
}

message GyroMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [rad/s], x-axis, y-axis, z-axis
}

message BumperMeasurement {
    string name  = 1;
    bool   value = 2;
}

message ForceMeasurement {
    string name  = 1;
    double value = 2;  // [N]
}

message Force3DMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [N], x-axis, y-axis, z-axis
}

message Force6DMeasurement {  // not yet implemented by cyberbotics/tc, but we don't use it anyway
    string  name   = 1;
    Vector3 force  = 2;  // [N], x-axis, y-axis, z-axis
    Vector3 torque = 3;  // [N.m], x-axis, y-axis, z-axis
}

message CameraMeasurement {
    string name    = 1;
    uint32 width   = 2;
    uint32 height  = 3;
    sint32 quality = 4;  // -1 = raw image, 100 = no compression, 0 = high compression
    bytes  image   = 5;  // RAW or JPEG encoded data (note: JPEG is not yet implemented)
}

message Message {
    enum MessageType {
        ERROR_MESSAGE   = 0;
        WARNING_MESSAGE = 1;
    }
    MessageType message_type = 1;
    string      text         = 2;
}

/// NUbots specific data sent from our own controllers rather than the official RoboCup Webots controller
message OdometryGroundTruth {
    /// Indicates if this message exists
    bool exists = 1;
    /// Affine3d transform from odometry (world) space to the robot (torso) space.
    /// It measures the world in robot space
    mat4 Htw = 2;
    /// Velocity of the robot torso in the world space
    vec3 vTw = 3;
}

/// NUbots specific data sent from our own controllers rather than the official RoboCup Webots controller
message LocalisationGroundTruth {
    /// Indicates if this message exists
    bool exists = 1;
    /// Isometry3d transform from localisation (world) space to field space
    mat4 Hfw = 2;
}

message VisionGroundTruth {
    /// Indicates if this message exists
    bool exists = 1;
    /// Vector from the world to the ball in world space.
    fvec3 rBWw = 2;
}

message SensorMeasurements {
    // simulation time stamp at which the measurements were performed expressed in [ms] from the start of the connection
    uint32 time = 1;
    // real unix time stamp at which the measurements were performed in [ms]
    uint64                             real_time        = 2;
    repeated Message                   messages         = 3;
    repeated AccelerometerMeasurement  accelerometers   = 4;
    repeated BumperMeasurement         bumpers          = 5;
    repeated CameraMeasurement         cameras          = 6;
    repeated ForceMeasurement          forces           = 7;
    repeated Force3DMeasurement        force3ds         = 8;
    repeated Force6DMeasurement        force6ds         = 9;
    repeated GyroMeasurement           gyros            = 10;
    repeated PositionSensorMeasurement position_sensors = 11;
    // NUbots-specific data. Set to 100 in case other data is added in by the RoboCup TC
    // Ground truth data
    OdometryGroundTruth     odometry_ground_truth     = 100;
    LocalisationGroundTruth localisation_ground_truth = 101;
    VisionGroundTruth       vision_ground_truth       = 102;
    // Walk optimisation data
    support.optimisation.OptimisationRobotPosition robot_position = 103;
    bool                                           reset_done     = 104;
}

message MotorPosition {
    string name     = 1;
    double position = 2;  // linear or angular target position expressed in [m] or [rad]
}

message MotorVelocity {
    string name     = 1;
    double velocity = 2;  // linear or angular target velocity expressed in [m/s] or [rad/s]
}

message MotorForce {
    string name  = 1;
    double force = 2;  // target force expressed in [N]
}

message MotorTorque {
    string name   = 1;
    double torque = 2;  // target torque expressed in [N.m]
}

message MotorPID {
    string  name = 1;
    Vector3 PID  = 2;  // PID controller values
}

message SensorTimeStep {  // apply to all sensors: Accelerometer, Camera, Gyro, PositionSensor and TouchSensor
    string name     = 1;
    uint32 timeStep = 2;  // time between two measurements expressed in [ms], disabled if 0
}

message CameraQuality {
    string name    = 1;
    sint32 quality = 2;  // JPEG quality
}

message CameraExposure {
    string name     = 1;
    double exposure = 2;  // photometric exposure of the scene in joule per square meter [J/m^2]
}

message ActuatorRequests {
    repeated MotorPosition  motor_positions   = 1;
    repeated MotorVelocity  motor_velocities  = 2;
    repeated MotorForce     motor_forces      = 3;
    repeated MotorTorque    motor_torques     = 4;
    repeated MotorPID       motor_pids        = 5;
    repeated SensorTimeStep sensor_time_steps = 6;
    repeated CameraQuality  camera_qualities  = 7;
    repeated CameraExposure camera_exposures  = 8;

    // NUbots-specific data. Set to 100 in case other data is added in by the RoboCup TC
    // Walk optimisation data
    support.optimisation.OptimisationCommand optimisation_command = 100;
}
