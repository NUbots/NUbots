// MIT License
//
// Copyright (c) 2015 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.support.nusight;

import "google/protobuf/timestamp.proto";
import "message/input/GameState.proto";
import "Vector.proto";
import "Matrix.proto";

message Overview {
    /// The timestamp this overview packet was sent
    google.protobuf.Timestamp timestamp = 1;
    uint32                    robot_id  = 2;

    /// The name of the binary this robot is executing
    string role_name = 3;

    /// The current battery voltage as a percentage.
    /// @see message::input::Sensors::battery
    float battery = 4;

    /// The current voltage of the battery.
    /// @see message::input::Sensors::voltage
    float voltage = 5;

    /// Localisation measured in field space
    fvec3 robot_position            = 7;
    fmat3 robot_position_covariance = 8;

    /// The ball position measured in field space
    fvec2 ball_position            = 9;
    fmat2 ball_position_covariance = 10;

    /// The {x, y} location we are kicking to
    fvec2 kick_target = 11;
    /// The type of game being played. From Game Controller
    input.GameState.Data.Mode game_mode = 12;
    /// The current stage of gameplay. For Game Controller
    input.GameState.Data.Phase game_phase = 13;
    /// Why the penalty was given. For Game Controller
    input.GameState.Data.PenaltyReason penalty_reason = 14;
    /// Last time the camera image was seen
    google.protobuf.Timestamp last_camera_image = 15;
    /// Last time vision objects were seen
    google.protobuf.Timestamp last_seen_ball = 16;
    google.protobuf.Timestamp last_seen_goal = 17;
    /// {x, y, omega} - x and y are the target to walk to and omega is the
    /// required rotational velocity about the z axis. In torso space
    fvec3 walk_command = 18;
}
