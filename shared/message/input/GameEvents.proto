// MIT License
//
// Copyright (c) 2017 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "message/input/GameState.proto";

message GameEvents {
    /// Context describes which actor/team is being referred to by an event
    enum Context {
        UNKNOWN_CONTEXT = 0;
        SELF            = 1;
        TEAM            = 2;
        OPPONENT        = 3;
        UNKNOWN         = 4;
    };

    enum TeamColour {
        UNKNOWN_TEAM_COLOUR = 0;
        CYAN                = 1;
        MAGENTA             = 2;
    };

    message Score {
        uint32 own_score      = 1;
        uint32 opponent_score = 2;
    }

    message GoalScored {
        /// The actor/team who scored the goal
        Context context     = 1;
        uint32  total_score = 2;
    }

    message Penalisation {
        Context context  = 1;
        uint32  robot_id = 2;
        /// The timestamp when the robot may resume playing
        google.protobuf.Timestamp    ends   = 3;
        GameState.Data.PenaltyReason reason = 4;
    }

    /// The context and robot which were unpenalised
    message Unpenalisation {
        Context context  = 1;
        uint32  robot_id = 2;
    }

    message CoachMessage {
        /// The intended recipient(s)
        Context context = 1;
        string  message = 2;
    }

    message HalfTime {
        bool first_half = 1;
    }

    message BallKickedOut {
        /// The party which kicked the ball out
        Context                   context = 1;
        google.protobuf.Timestamp time    = 3;
    }

    message KickOffTeam {
        Context context = 1;
    }

    message GamePhase {
        GameState.Data.Phase phase = 1;
        /// Time when play begins.
        /// Set some time after game-states INITIAL or READY
        google.protobuf.Timestamp ready_time = 2;
        /// Time when the first half is due to end
        /// Set some time after game-states SET or PLAYING
        google.protobuf.Timestamp end_half  = 3;
        google.protobuf.Timestamp ball_free = 4;
        /// Timestamp when the current phase will end
        /// Set some time after game-state TIMEOUT
        google.protobuf.Timestamp ends = 5;
        /// Time when the next half is to begin
        /// Set some time after game-state FINISHED
        google.protobuf.Timestamp next_half = 6;
    }

    message GameMode {
        GameState.Data.Mode mode = 1;
    }
}
