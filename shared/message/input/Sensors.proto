// MIT License
//
// Copyright (c) 2013 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "Matrix.proto";
import "Neutron.proto";
import "Vector.proto";
import "Transform.proto";
import "message/actuation/Servos.proto";

import "message/behaviour/state/WalkState.proto";

message Sensors {
    /// Full set of information to use a given servo.
    /// Ref: https://emanual.robotis.com/docs/en/dxl/mx/mx-64-2/ ;
    /// https://emanual.robotis.com/docs/en/dxl/mx/mx-106-2/

    /// Button information
    message Button {
        uint32 id = 1;
        /// True is pressed, false is unpressed
        bool value = 2;
    }

    /// LED information
    message LED {
        uint32 id     = 1;
        uint32 colour = 2;
    }

    /// Foot information
    message Foot {
        bool down = 1;
        iso3 Hwf  = 2;
    }

    /// When the data were taken/captured
    google.protobuf.Timestamp timestamp = 1;

    /// The values are between 0 and 1023, representing a value between -4g and 4g
    /// => 512 = 0g. Is {x, y, z} acceleration
    vec3 accelerometer = 2;

    /// The values are between 0 and 1023, represent a value between -500 degrees
    /// per second and 500 degrees per second.
    /// => 512 = 0 degrees per second. Is {x, y, z} angular velocity
    vec3 gyroscope = 3;

    /// Set of force sensitive resistors. Used to sense if a foot is on the ground
    repeated Foot feet = 4 [(array_size) = 2];

    /// Set of servos on the robot
    map<uint32, message.actuation.Servo> servos = 5;

    /// Set of buttons on the robot
    repeated Button button = 6;

    /// Set of LEDs on the robot
    repeated LED led = 7;

    /// Voltage for the whole robot, from the main battery
    float voltage = 8;

    /// Battery
    float battery = 9;

    /// Cartesian position of the CoM {M} of the robot from the torso {T} in the torso space {t}
    vec3 rMTt = 10;

    /// Inertia tensor measured in particle space and relative to the CoM of the particle
    mat3 inertia_tensor = 11;

    /// A set of transforms; one for each frame (All the joints, cameras and base of feet)
    repeated mat4 Htx = 12 [(array_size) = 24];

    /// Homogeneous transform: world {w} to robot {r}
    iso3 Hrw = 13;

    /// Homogeneous transform: world {w} to torso {t}
    iso3 Htw = 14;

    /// Homogeneous transform: planted foot {p} to world {w}
    iso3 Hwp = 15;

    /// Translational velocity of torso {t} in world {w} space
    vec3 vTw = 16;

    behaviour.state.WalkState.Phase planted_foot_phase = 17;
}
