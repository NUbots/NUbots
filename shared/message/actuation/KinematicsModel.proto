// MIT License
//
// Copyright (c) 2017 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.actuation;

import "Vector.proto";
import "Matrix.proto";

/**
 * Contains lots of kinematics config measurements and transforms.
 * See `KinematicsConfiguration.yaml` for more detail on a particular variable.
 * Convention: all values positive
 */
message KinematicsModel {
    message Leg {
        float HIP_OFFSET_X                = 1;
        float HIP_OFFSET_Y                = 2;
        float HIP_OFFSET_Z                = 3;
        float UPPER_LEG_LENGTH            = 4;
        float LOWER_LEG_LENGTH            = 5;
        float FOOT_HEIGHT                 = 6;
        float FOOT_LENGTH                 = 7;
        float TOE_LENGTH                  = 8;
        float HEEL_LENGTH                 = 9;
        float FOOT_WIDTH                  = 10;
        float FOOT_CENTRE_TO_ANKLE_CENTRE = 11;
        float LENGTH_BETWEEN_LEGS         = 12;
        int32 LEFT_TO_RIGHT_HIP_YAW       = 13;
        int32 LEFT_TO_RIGHT_HIP_ROLL      = 14;
        int32 LEFT_TO_RIGHT_HIP_PITCH     = 15;
        int32 LEFT_TO_RIGHT_KNEE          = 16;
        int32 LEFT_TO_RIGHT_ANKLE_PITCH   = 17;
        int32 LEFT_TO_RIGHT_ANKLE_ROLL    = 18;
    }

    message Head {
        float NECK_BASE_POS_FROM_ORIGIN_X     = 1;
        float NECK_BASE_POS_FROM_ORIGIN_Y     = 2;
        float NECK_BASE_POS_FROM_ORIGIN_Z     = 3;
        float NECK_LENGTH                     = 4;
        float NECK_TO_CAMERA_X                = 5;
        float NECK_TO_CAMERA_Y                = 6;
        float NECK_TO_CAMERA_Z                = 7;
        float CAMERA_DECLINATION_ANGLE_OFFSET = 8;
        float INTERPUPILLARY_DISTANCE         = 13;

        // Head movement limits, in radians
        float MAX_YAW   = 9;
        float MIN_YAW   = 10;
        float MAX_PITCH = 11;
        float MIN_PITCH = 12;
    }

    message Arm {
        float DISTANCE_BETWEEN_SHOULDERS = 1;
        float SHOULDER_Z_OFFSET          = 2;
        float SHOULDER_X_OFFSET          = 3;
        float SHOULDER_LENGTH            = 4;
        float SHOULDER_WIDTH             = 5;
        float SHOULDER_HEIGHT            = 6;
        float UPPER_ARM_LENGTH           = 7;
        float UPPER_ARM_Y_OFFSET         = 8;
        float UPPER_ARM_X_OFFSET         = 9;
        float LOWER_ARM_LENGTH           = 10;
        float LOWER_ARM_Y_OFFSET         = 11;
        float LOWER_ARM_Z_OFFSET         = 12;
    }

    /// {CoM_x, CoM_y, CoM_z, mass} in SI units
    /// A Particles CoM is in particle space
    message MassModel {
        vec4 head        = 1;
        vec4 arm_upper   = 2;
        vec4 arm_lower   = 3;
        vec4 torso       = 4;
        vec4 hip_block   = 5;
        vec4 leg_upper   = 6;
        vec4 leg_lower   = 7;
        vec4 ankle_block = 8;
        vec4 foot        = 9;
    }

    /// Particle inertial tensors (in particle space) with respect to the CoM of
    /// the particle
    ///  [[xx, xy, xz],
    ///  [xy, yy, yz],
    ///  [xz, yz, zz]]
    /// SI Units
    message TensorModel {
        mat3 head        = 1;
        mat3 arm_upper   = 2;
        mat3 arm_lower   = 3;
        mat3 torso       = 4;
        mat3 hip_block   = 5;
        mat3 leg_upper   = 6;
        mat3 leg_lower   = 7;
        mat3 ankle_block = 8;
        mat3 foot        = 9;
    }

    Leg         leg          = 1;
    Head        head         = 2;
    Arm         arm          = 3;
    MassModel   mass_model   = 4;
    TensorModel tensor_model = 5;
}
