// MIT License
//
// Copyright (c) 2022 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.actuation;

import "google/protobuf/timestamp.proto";

enum ServoID {
    R_SHOULDER_PITCH = 0;
    L_SHOULDER_PITCH = 1;
    R_SHOULDER_ROLL  = 2;
    L_SHOULDER_ROLL  = 3;
    R_ELBOW          = 4;
    L_ELBOW          = 5;
    R_HIP_YAW        = 6;
    L_HIP_YAW        = 7;
    R_HIP_ROLL       = 8;
    L_HIP_ROLL       = 9;
    R_HIP_PITCH      = 10;
    L_HIP_PITCH      = 11;
    R_KNEE           = 12;
    L_KNEE           = 13;
    R_ANKLE_PITCH    = 14;
    L_ANKLE_PITCH    = 15;
    R_ANKLE_ROLL     = 16;
    L_ANKLE_ROLL     = 17;
    HEAD_YAW         = 18;
    HEAD_PITCH       = 19;
    NUMBER_OF_SERVOS = 20;
}

message ServoState {
    /// The ID of the servo
    uint32 id = 1;
    /// Current error state of the servo
    /// different to the dynamixel packet error status
    uint32 hardware_error = 2;
    // Values that are either simulated or read from the servos
    /// The last read pulse width modulation of the servo
    float present_pwm = 3;
    /// The last read current of the servo
    float present_current = 4;
    /// The last read velocity of the servo
    float present_velocity = 5;
    /// The last read position of the servo
    float present_position = 6;
    /// The last read voltage of the servo
    float voltage = 7;
    /// The last read temperature of the servo
    float temperature = 8;
    /// True if we need to write new values to the hardware
    bool dirty = 9;
    // Whether we have initialised this servo yet
    bool initialised = 10;
}

message ServoStates {
    repeated ServoState states = 1;
}

message ServoGoal {
    /// The ID of the servo
    uint32 id = 1;
    /// Whether the servo's torque is enabled, allowing it to move
    bool torque_enabled = 2;
    // The desired pwm value for motor control
    float goal_pwm = 3;
    // The desired current value for the servo
    float goal_current = 4;
    // The desired velocity value for the servo
    float goal_velocity = 5;
    // The desired position value for the servo
    float goal_position = 6;
    // Goal time to reach the desired state
    google.protobuf.Timestamp goal_time = 7;
    /// Propotional gain of the servo
    float position_p_gain = 8;
}

message ServoGoals {
    repeated ServoGoal goals = 1;
}

message Servo {
    /// Servo state
    ServoState state = 1;
    /// Servo goal
    ServoGoal goal = 3;
}

// Message for each servo with command information

message RightShoulderPitch {
    Servo servo = 1;
}

message LeftShoulderPitch {
    Servo servo = 1;
}

message RightShoulderRoll {
    Servo servo = 1;
}

message LeftShoulderRoll {
    Servo servo = 1;
}

message RightElbow {
    Servo servo = 1;
}

message LeftElbow {
    Servo servo = 1;
}

message RightHipYaw {
    Servo servo = 1;
}

message LeftHipYaw {
    Servo servo = 1;
}

message RightHipRoll {
    Servo servo = 1;
}

message LeftHipRoll {
    Servo servo = 1;
}

message RightHipPitch {
    Servo servo = 1;
}

message LeftHipPitch {
    Servo servo = 1;
}

message RightKnee {
    Servo servo = 1;
}

message LeftKnee {
    Servo servo = 1;
}

message RightAnklePitch {
    Servo servo = 1;
}

message LeftAnklePitch {
    Servo servo = 1;
}

message RightAnkleRoll {
    Servo servo = 1;
}

message LeftAnkleRoll {
    Servo servo = 1;
}

message HeadYaw {
    Servo servo = 1;
}

message HeadPitch {
    Servo servo = 1;
}
