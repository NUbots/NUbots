// MIT License
//
// Copyright (c) 2013 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.actuation;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

/**
 * @author Trent Houliston
 */
message ServoTarget {
    /// When the target was created
    google.protobuf.Timestamp time = 1;
    /// The ID of the servo being controlled
    uint32 id = 2;

    string name = 3;
    /// The position value of the destination. 0 to 4,095 (0xFFF) is available.
    /// The unit is 0.088 [°]. If Goal Position is out of the range, Angle Limit
    /// Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is
    /// triggered as set in Alarm LED/Shutdown
    float position = 4;
    /// Proportional gain. In proportion to the servo's position error. Gain
    /// values are in range 0~254. K_p : p_gain / 8
    float gain = 5;
    /// Used to set the servo on or off. Typically either 0 (off) or 100 (on)
    float torque = 6;
}

message ServoTargets {
    repeated ServoTarget targets = 1;
}

message SubcontrollerServoTarget {
    /// How long it should take the servo to reach the desired position
    google.protobuf.Duration time = 1;
    /// The ID of the servo being controlled
    uint32 id = 2;
    /// The position value of the destination. 0 to 4,095 (0xFFF) is available.
    /// The unit is 0.088 [°]. If Goal Position is out of the range, Angle Limit
    /// Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is
    /// triggered as set in Alarm LED/Shutdown
    float position = 3;
    /// Proportional gain. In proportion to the servo's position error. Gain
    /// values are in range 0~254. K_p : p_gain / 8
    float gain = 4;
    /// Used to set the servo on or off. Typically either 0 (off) or 100 (on)
    float torque = 5;
}

message SubcontrollerServoTargets {
    repeated SubcontrollerServoTarget targets = 1;
}
