# Continuous Integration tests for NUsight
name: NUsight CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
  # Trigger for merge queue
  merge_group:
    types: [checks_requested]

# Ensure that only one instance of the workflow is run at a time for each branch/tag.
# Jobs currently running on the branch/tag will be cancelled when new commits are pushed.
# See https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#concurrency.
concurrency:
  # `github.workflow` is the workflow name, `github.ref` is the current branch/tag identifier
  group: ${{ format('{0}:{1}', github.workflow, github.ref) }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Set the yarn cache folder to a writable folder
env:
  HOME: ${{ github.workspace }}
  YARN_CACHE_FOLDER: ${{ github.workspace }}/.yarn

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Detects changes to NUsight related files, for conditionally running other jobs
  check_for_changes:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Output the detected changes for conditionally running other jobs
    outputs:
      has_workflow_changes: ${{ steps.filter.outputs.workflow_changes }}
      has_docker_changes: ${{ steps.filter.outputs.docker_changes }}
      has_nusight_changes: ${{ steps.filter.outputs.nusight_changes }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for NUsight Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflow_changes:
              - '.github/workflows/nusight.yaml'
            docker_changes:
              - 'docker/**'
            nusight_changes:
              - 'nusight2/**'
              - 'shared/message/**/*.proto'
              - 'nuclear/message/proto/**/*.proto'

  # Build the docker image. This job is not conditional since we don't want it skipped
  # because other jobs depend on it. The actual building of the image is cached, so it
  # won't be doing unnecessary work if there are no relevant Dockerfile changes.
  build_docker:
    name: "Build docker image"

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # We output the image tag that we create so the other jobs can use it
    outputs:
      image: ${{ steps.image_output.outputs.image }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Free up space on the runner
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v2.0.0
        with:
          # Remove unneeded tools to free up more space
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/share/chromium /usr/local/share/powershell"
          testing: false

      # Figure out the tag to use for the Docker image
      - name: Set Docker tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]
          then
            branch="${{ github.ref_name }}"
            # Replace forward slashes with dashes to avoid special characters
            echo "DOCKER_TAG=${branch////-}" >> "${GITHUB_ENV}";
          elif [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            echo "DOCKER_TAG=PR-${{ github.event.number }}" >> "${GITHUB_ENV}";
          elif [[ "${{ github.event_name }}" == "merge_group" ]]
          then
            pr=$(echo "${{ github.ref_name }}" | grep -iEo 'pr-[[:digit:]]+' | head -1)
            echo DOCKER_TAG=PR-${pr:3} >> "${GITHUB_ENV}";
          fi

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Setup docker buildx
      - name: 🐳 Set up docker buildx 🐳
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            env.BUILDKIT_STEP_LOG_MAX_SIZE=-1
            env.BUILDKIT_STEP_LOG_MAX_SPEED=-1

      # Login to the docker repository
      - name: Login to the docker repository
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Ensure write permissions for group and other are NOT set
      # This is done to ensure consistency with the b script across all systems
      - name: Enforce file permissions
        run: chmod -Rv g-w,o-w docker/

      # Build and push the docker image
      - name: 🐳 Build the docker image 🐳
        uses: docker/build-push-action@v4
        with:
          pull: true
          tags: "nubots/nubots:${{ env.DOCKER_TAG }}"
          file: docker/Dockerfile
          context: docker
          cache-from: |
            type=registry,ref=nubots/nubots:${{ env.DOCKER_TAG }}
            type=registry,ref=nubots/nubots:generic
          cache-to: type=inline
          build-args: platform=generic
          push: true

      - id: image_output
        name: Output the created image
        run: echo "image=nubots/nubots:${{ env.DOCKER_TAG }}" >> $GITHUB_OUTPUT

  # Build the NUsight code
  build-nusight:
    name: Build NUsight
    needs: [check_for_changes, build_docker]

    # Run only if the workflow or NUsight related files have changed
    if: >
      needs.check_for_changes.outputs.has_workflow_changes == 'true' ||
      needs.check_for_changes.outputs.has_docker_changes == 'true' ||
      needs.check_for_changes.outputs.has_nusight_changes == 'true'

    runs-on: ubuntu-22.04

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Get our yarn cache if it exists
      # See https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      # Check if the yarn cache directory is valid
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit`
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Check dependencies from cache and install any which weren't cached or were corrupted
      - name: Install Dependencies
        run: ./b yarn install --prefer-offline

      # Typescript type checking
      - name: Type Check NUsight
        run: ./b yarn tscheck

      # Build the NUsight code
      - name: Build NUsight
        run: ./b yarn build:ci

  # Build the NUsight Storybook code
  build-nusight-storybook:
    name: Build NUsight Storybook
    needs: [check_for_changes, build_docker]

    # Run only if the workflow or NUsight related files have changed
    if: >
      needs.check_for_changes.outputs.has_workflow_changes == 'true' ||
      needs.check_for_changes.outputs.has_docker_changes == 'true' ||
      needs.check_for_changes.outputs.has_nusight_changes == 'true'

    runs-on: ubuntu-22.04

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Get our yarn cache if it exists
      # See https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      # Check if the yarn cache directory is valid
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit`
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Check dependencies from cache and install any which weren't cached or were corrupted
      - name: Install Dependencies
        run: ./b yarn install --prefer-offline

      # Build the NUsight Storybook code
      - name: Build NUsight Storybook
        run: ./b yarn storybook:build

  # Test the NUsight code
  test-nusight:
    name: Test NUsight
    needs: [check_for_changes, build_docker]

    # Run only if the workflow or NUsight related files have changed
    if: >
      needs.check_for_changes.outputs.has_workflow_changes == 'true' ||
      needs.check_for_changes.outputs.has_docker_changes == 'true' ||
      needs.check_for_changes.outputs.has_nusight_changes == 'true'

    runs-on: ubuntu-22.04

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Get our yarn cache if it exists
      # See https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      # Check if the yarn cache directory is valid
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit`
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Check dependencies from cache and install any which weren't cached or were corrupted
      - name: Install Dependencies
        run: ./b yarn install --prefer-offline

      - name: Test NUsight
        run: ./b yarn test:ci
