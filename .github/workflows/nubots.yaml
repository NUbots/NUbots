# Continuous Integration tests
name: NUbots CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  # Triggers on PRs to any branch
  pull_request:
  # Trigger for merge queue
  merge_group:
    types: [checks_requested]

# Ensure that only one instance of the workflow is run at a time for each branch/tag.
# Jobs currently running on the branch/tag will be cancelled when new commits are pushed.
# See https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#concurrency.
concurrency:
  # `github.workflow` is the workflow name, `github.ref` is the current branch/tag identifier
  group: ${{ format('{0}:{1}', github.workflow, github.ref) }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Detects changes to NUbots related files, for conditionally running other jobs
  check_for_changes:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Output the detected changes for conditionally running other jobs
    outputs:
      has_workflow_changes: ${{ steps.filter.outputs.workflow_changes }}
      has_docker_changes: ${{ steps.filter.outputs.docker_changes }}
      has_cpp_changes: ${{ steps.filter.outputs.cpp_changes }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for c++ changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          # Considers any non-NUsight and non-VSCode config change to be a c++ change
          filters: |
            workflow_changes:
              - '.github/workflows/nubots.yaml'
            docker_changes:
              - 'docker/**'
            cpp_changes:
              - '!{nusight2,.vscode,tools}/**'

  # Build the docker image. This job is not conditional since we don't want it skipped
  # because other jobs depend on it. The actual building of the image is cached, so it
  # won't be doing unnecessary work if there are no relevant Dockerfile changes.
  build_docker:
    name: "Build docker image"

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # We output the image tag that we create so the other jobs can use it
    outputs:
      image: ${{ steps.image_output.outputs.image }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Free up space on the runner
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          # Remove unneeded tools to free up more space
          android: true
          dotnet: true
          haskell: true

      # Figure out the tag to use for the Docker image
      - name: Set Docker tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]
          then
            branch="${{ github.ref_name }}"
            # Replace forward slashes with dashes to avoid special characters
            echo "DOCKER_TAG=${branch////-}" >> "${GITHUB_ENV}";
          elif [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            echo "DOCKER_TAG=PR-${{ github.event.number }}" >> "${GITHUB_ENV}";
          elif [[ "${{ github.event_name }}" == "merge_group" ]]
          then
            pr=$(echo "${{ github.ref_name }}" | grep -iEo 'pr-[[:digit:]]+' | head -1)
            echo DOCKER_TAG=PR-${pr:3} >> "${GITHUB_ENV}";
          fi

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Setup docker buildx
      - name: 🐳 Set up docker buildx 🐳
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            env.BUILDKIT_STEP_LOG_MAX_SIZE=-1
            env.BUILDKIT_STEP_LOG_MAX_SPEED=-1

      # Login to the docker repository
      - name: Login to the docker repository
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Ensure write permissions for group and other are NOT set
      # This is done to ensure consistency with the b script across all systems
      - name: Enforce file permissions
        run: chmod -Rv g-w,o-w docker/

      # Build and push the docker image
      - name: 🐳 Build the docker image 🐳
        uses: docker/build-push-action@v4
        with:
          pull: true
          tags: "nubots/nubots:${{ env.DOCKER_TAG }}"
          file: docker/Dockerfile
          context: docker
          cache-from: |
            type=registry,ref=nubots/nubots:${{ env.DOCKER_TAG }}
            type=registry,ref=nubots/nubots:generic
          cache-to: type=inline
          build-args: platform=generic
          push: true

      - id: image_output
        name: Output the created image
        run: echo "image=nubots/nubots:${{ env.DOCKER_TAG }}" >> $GITHUB_OUTPUT

  # Build the codebase as well as run clang-tidy
  build_nubots:
    name: "Build and test code"
    needs: [check_for_changes, build_docker]

    # Run only if the workflow or c++ related code files have changed
    if: |
      needs.check_for_changes.outputs.has_workflow_changes == 'true' ||
      needs.check_for_changes.outputs.has_docker_changes == 'true' ||
      needs.check_for_changes.outputs.has_cpp_changes == 'true'

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    env:
      CTEST_OUTPUT_ON_FAILURE: 1

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: ccache
        uses: TrentHouliston/ccache-action@e3d104e3e9fdc54e91ba1e63bafc172484923084

      - name: Configure the code
        run: |
          ./b configure --build-dir build \
          -- \
          -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} \
          -DCMAKE_TOOLCHAIN_FILE=/usr/local/toolchain.cmake \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCI_BUILD=ON \
          -DBUILD_TESTS=ON \
          -DENABLE_COVERAGE=${{ inputs.coverage }} \
          -DENABLE_CLANG_TIDY=${{ inputs.clang-tidy }}

      # The tool requires some cmake variables, but configure needs to be run again after this role is made
      # Therefore run configure twice, on either side of the unused role
      - name: Generate Role for Unused Modules
        run: ./b unused

      - name: Configure the code
        run: |
          ./b configure --build-dir build \
          -- \
          -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} \
          -DCMAKE_TOOLCHAIN_FILE=/usr/local/toolchain.cmake \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCI_BUILD=ON \
          -DBUILD_TESTS=ON \
          -DENABLE_COVERAGE=${{ inputs.coverage }} \
          -DENABLE_CLANG_TIDY=${{ inputs.clang-tidy }}

      - name: Build the code
        run: ./b build --build-dir build

      - name: Test the code
        run: |
          cd build
          ninja test

  # Check the code is formatted correctly
  check-format:
    name: "Check Code Formatting"
    needs: [check_for_changes, build_docker]

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4
        # Need to fetch everything in order to know when files were added/updated
        with:
          fetch-depth: 0

      - name: Set Git Security
        run: git config --global --add safe.directory '*'

      - name: Install NUsight dependencies for formatting
        run: ./b yarn

      - name: Check formatting
        run: ./b format --check --verbose
